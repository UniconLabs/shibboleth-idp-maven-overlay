<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">
       
    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
        p:placeholderPrefix="%{" p:placeholderSuffix="}" />

    <bean class="net.shibboleth.idp.profile.impl.ProfileActionBeanPostProcessor" />
    <bean class="net.shibboleth.ext.spring.config.IdentifiableBeanPostProcessor" />

    <import resource="../../../conf/authn/password-authn-config.xml" />

    <bean id="ExtractUsernamePasswordFromBasicAuth"
        class="net.shibboleth.idp.authn.impl.ExtractUsernamePasswordFromBasicAuth" scope="prototype"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest"
        p:lowercase-ref="shibboleth.authn.Password.Lowercase"
        p:uppercase-ref="shibboleth.authn.Password.Uppercase"
        p:trim-ref="shibboleth.authn.Password.Trim"
        p:transforms-ref="shibboleth.authn.Password.Transforms" />

    <bean id="SetRPUIInformation"
            class="net.shibboleth.idp.ui.impl.SetRPUIInformation" scope="prototype"
            p:httpServletRequest-ref="shibboleth.HttpServletRequest">
        <property name="fallbackLanguages">
            <bean parent="shibboleth.CommaDelimStringArray" c:_0="#{'%{idp.ui.fallbackLanguages:}'.trim()}" />
        </property>
    </bean>
    
    <bean id="PreserveAuthenticationFlowState"
        class="net.shibboleth.idp.authn.impl.PreserveAuthenticationFlowState" scope="prototype"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest"
        p:parameterNames="#{getObject('shibboleth.authn.Password.ExtendedFlowParameters')}" />
    
    <bean id="ExtractUsernamePasswordFromFormRequest"
        class="net.shibboleth.idp.authn.impl.ExtractUsernamePasswordFromFormRequest" scope="prototype"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest"
        p:usernameFieldName-ref="shibboleth.authn.Password.UsernameFieldName"
        p:passwordFieldName-ref="shibboleth.authn.Password.PasswordFieldName"
        p:SSOBypassFieldName-ref="shibboleth.authn.Password.SSOBypassFieldName"
        p:lowercase-ref="shibboleth.authn.Password.Lowercase"
        p:uppercase-ref="shibboleth.authn.Password.Uppercase"
        p:trim-ref="shibboleth.authn.Password.Trim"
        p:transforms-ref="shibboleth.authn.Password.Transforms" />
        
    <bean id="ValidateUsernamePasswordAgainstJAAS"
            class="net.shibboleth.idp.authn.impl.ValidateUsernamePasswordAgainstJAAS" scope="prototype"
            p:savePasswordToCredentialSet="#{getObject('shibboleth.authn.Password.RetainAsPrivateCredential') != null ? getObject('shibboleth.authn.Password.RetainAsPrivateCredential') : false}"
            p:loginConfigNames-ref="shibboleth.authn.JAAS.LoginConfigNames" p:loginConfigType="JavaLoginConfig"
            p:addDefaultPrincipals="#{getObject('shibboleth.authn.Password.addDefaultPrincipals') ?:
                (getObject('shibboleth.authn.Password.PrincipalOverride') == null
                    or getObject('shibboleth.authn.Password.PrincipalOverride').isEmpty())}"
            p:supportedPrincipals="#{getObject('shibboleth.authn.Password.PrincipalOverride')}"
            p:classifiedMessages-ref="shibboleth.authn.Password.ClassifiedMessageMap"
            p:resultCachingPredicate="#{getObject('shibboleth.authn.Password.resultCachingPredicate')}">
        <property name="loginConfigParameters">
            <bean class="java.security.URIParameter">
                <constructor-arg ref="shibboleth.authn.JAAS.JAASConfigURI" />
            </bean>
        </property>
    </bean>

    <bean id="ValidateUsernamePasswordAgainstKerberos"
        class="net.shibboleth.idp.authn.impl.ValidateUsernamePasswordAgainstKerberos" scope="prototype"
        p:savePasswordToCredentialSet="#{getObject('shibboleth.authn.Password.RetainAsPrivateCredential') != null ? getObject('shibboleth.authn.Password.RetainAsPrivateCredential') : false}"
        p:refreshKrb5Config-ref="shibboleth.authn.Krb5.RefreshConfig"
        p:preserveTicket-ref="shibboleth.authn.Krb5.PreserveTicket"
        p:servicePrincipal="#{getObject('shibboleth.authn.Krb5.ServicePrincipal')}"
        p:keytabPath="#{getObject('shibboleth.authn.Krb5.Keytab')}"
        p:addDefaultPrincipals="#{getObject('shibboleth.authn.Password.addDefaultPrincipals') ?:
            (getObject('shibboleth.authn.Password.PrincipalOverride') == null
                or getObject('shibboleth.authn.Password.PrincipalOverride').isEmpty())}"
        p:supportedPrincipals="#{getObject('shibboleth.authn.Password.PrincipalOverride')}"
        p:classifiedMessages-ref="shibboleth.authn.Password.ClassifiedMessageMap"
        p:resultCachingPredicate="#{getObject('shibboleth.authn.Password.resultCachingPredicate')}" />

    <!-- Parent beans for custom ldaptive CredentialConfig types. -->
    <bean id="shibboleth.X509ResourceCredentialConfig"
        class="net.shibboleth.idp.authn.impl.X509ResourceCredentialConfig" abstract="true" /> 
    <bean id="shibboleth.KeystoreResourceCredentialConfig"
        class="net.shibboleth.idp.authn.impl.KeystoreResourceCredentialConfig" abstract="true" /> 

    <bean id="ValidateUsernamePasswordAgainstLDAP"
        class="net.shibboleth.idp.authn.impl.ValidateUsernamePasswordAgainstLDAP" scope="prototype"
        p:savePasswordToCredentialSet="#{getObject('shibboleth.authn.Password.RetainAsPrivateCredential') != null ? getObject('shibboleth.authn.Password.RetainAsPrivateCredential') : false}"
        p:authenticator-ref="shibboleth.authn.LDAP.authenticator"
        p:addDefaultPrincipals="#{getObject('shibboleth.authn.Password.addDefaultPrincipals') ?:
            (getObject('shibboleth.authn.Password.PrincipalOverride') == null
                or getObject('shibboleth.authn.Password.PrincipalOverride').isEmpty())}"
        p:supportedPrincipals="#{getObject('shibboleth.authn.Password.PrincipalOverride')}"
        p:classifiedMessages-ref="shibboleth.authn.Password.ClassifiedMessageMap"
        p:resultCachingPredicate="#{getObject('shibboleth.authn.Password.resultCachingPredicate')}"
        p:returnAttributes-ref="shibboleth.authn.LDAP.returnAttributes" />

</beans>
