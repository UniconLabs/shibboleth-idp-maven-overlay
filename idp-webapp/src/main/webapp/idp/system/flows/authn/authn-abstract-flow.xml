<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      abstract="true" parent="authn.events">

    <!-- Rudimentary impediment to direct execution of subflow. -->
    <input name="calledAsSubflow" type="boolean" required="true" />

    <!-- Indicates another login flow has called one as a subflow. -->
    <input name="calledAsExtendedFlow" type="boolean" />

    <!-- Defines the possible end-state events, and a global transition rule. -->

    <!-- Successful completion of subflow. -->
    <end-state id="proceed" />

    <!-- Error events to reflect back from this subflow. -->
    <end-state id="AuthenticationException" />
    <end-state id="IdentitySwitch" />
    <end-state id="InputOutputError" />
    <end-state id="InvalidCredentials" />
    <end-state id="InvalidProfileContext" />
    <end-state id="InvalidSubjectContext" />
    <end-state id="InvalidSubjectCanonicalizationContext" />
    <end-state id="NoCredentials" />
    <end-state id="NoPassive" />
    <end-state id="NoPotentialFlow" />
    <end-state id="RequestUnsupported" />
    <end-state id="ReselectFlow" />
    <end-state id="RuntimeException" />
    <end-state id="SubjectCanonicalizationError" />

    <action-state id="LogRuntimeException">
        <evaluate expression="T(org.slf4j.LoggerFactory).getLogger('net.shibboleth.idp.authn').error('Uncaught runtime exception', flowExecutionException.getCause())" />
        <transition to="RuntimeException" />
    </action-state>

    <!-- Default is to turn any event into its own end-state. -->
    <global-transitions>
        <transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
        <transition on="#{currentEvent.id.startsWith('authn/')}" to="ReselectFlow">
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext)).setSignaledFlowId(currentEvent.id)" />
        </transition>
        <transition on="#{!'proceed'.equals(currentEvent.id)}" to="#{currentEvent.id}" />
    </global-transitions>

</flow>
