<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd">

    <action-state id="DecodeMessage">
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="CheckAccess" />
        <evaluate expression="DecodeMessage" />

        <evaluate expression="PostDecodePopulateAuditContext" />

        <evaluate expression="SAMLMetadataLookup" />
        <evaluate expression="SAMLPopulateAttributeConsumingService" />

        <evaluate expression="InitializeRelyingPartyContexFromSAMLPeer" />
        <evaluate expression="SelectRelyingPartyConfiguration" />

        <evaluate expression="PostLookupPopulateAuditContext" />

        <evaluate expression="PopulateSubjectContext" />
        <evaluate expression="ResolveAttributes" />
        <evaluate expression="FilterAttributes" />

        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="#{ ProtocolStateMap.get(opensamlProfileRequestContext.getInboundMessageContext().getMessage().getProtocol()) }" />
    </action-state>
    
    <action-state id="EncodeToSAML1">
        <evaluate expression="InitializeOutboundMessageContext" />
        <evaluate expression="AddSAML1AttributeStatementToAssertion" />
        <evaluate expression="AddNameIdentifierToSubjects" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ResponseView" />
    </action-state>

    <action-state id="EncodeToSAML2">
        <evaluate expression="InitializeOutboundMessageContext" />
        <evaluate expression="AddSAML2AttributeStatementToAssertion" />
        <evaluate expression="AddNameIDToSubjects" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ResponseView" />
    </action-state>

    <!-- Passthrough state if an exception is thrown. -->

    <action-state id="LogRuntimeException">
        <on-entry>
            <evaluate expression="T(org.slf4j.LoggerFactory).getLogger('net.shibboleth.idp.profile').error('Uncaught runtime exception', rootCauseException)" />
        </on-entry>
        <evaluate expression="'RuntimeException'" />
        <transition to="ResponseView" />
    </action-state>
    
    <end-state id="ResponseView" view="resolvertest">
        <on-entry>
            <evaluate expression="PostAssertionPopulateAuditContext" />
            <evaluate expression="PostResponsePopulateAuditContext" />
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.RelyingPartyContext), true).getSubcontext(T(net.shibboleth.idp.attribute.context.AttributeContext))" result="requestScope.attributeContext" />
            <evaluate expression="T(org.opensaml.core.xml.util.XMLObjectSupport)" result="requestScope.XMLObjectSupport" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.xml.SerializeSupport)" result="requestScope.SerializeSupport" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
        </on-entry>
    </end-state>

    <global-transitions>
        <transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
        <transition on="#{!'proceed'.equals(currentEvent.id)}" to="ResponseView" />
    </global-transitions>

    <bean-import resource="resolvertest-beans.xml" />

</flow>
